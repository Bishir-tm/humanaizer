// estimate-ai-detection-score.ts
'use server';

/**
 * @fileOverview Estimates the AI detection score of a given text.
 *
 * - estimateAiDetectionScore - A function that estimates the AI detection score of a given text.
 * - EstimateAiDetectionScoreInput - The input type for the estimateAiDetectionScore function.
 * - EstimateAiDetectionScoreOutput - The return type for the estimateAiDetectionScore function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const EstimateAiDetectionScoreInputSchema = z.object({
  text: z.string().describe('The text to estimate the AI detection score for.'),
});
export type EstimateAiDetectionScoreInput = z.infer<
  typeof EstimateAiDetectionScoreInputSchema
>;

const EstimateAiDetectionScoreOutputSchema = z.object({
  score: z
    .number()
    .describe(
      'The estimated AI detection score of the text, ranging from 0 to 1, where 1 indicates a high likelihood of being AI-generated.'
    ),
  explanation: z
    .string()
    .describe(
      'Explanation of why the model thinks the text was AI generated.'
    ),
});
export type EstimateAiDetectionScoreOutput = z.infer<
  typeof EstimateAiDetectionScoreOutputSchema
>;

export async function estimateAiDetectionScore(
  input: EstimateAiDetectionScoreInput
): Promise<EstimateAiDetectionScoreOutput> {
  return estimateAiDetectionScoreFlow(input);
}

const prompt = ai.definePrompt({
  name: 'estimateAiDetectionScorePrompt',
  input: {schema: EstimateAiDetectionScoreInputSchema},
  output: {schema: EstimateAiDetectionScoreOutputSchema},
  prompt: `You are an AI detection expert.  You will estimate the likelihood that the following text was generated by AI. Return a score between 0 and 1, where 1 indicates a high likelihood of being AI-generated.  Also give a short explanation for your estimate.

Text: {{{text}}}`,
});

const estimateAiDetectionScoreFlow = ai.defineFlow(
  {
    name: 'estimateAiDetectionScoreFlow',
    inputSchema: EstimateAiDetectionScoreInputSchema,
    outputSchema: EstimateAiDetectionScoreOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
